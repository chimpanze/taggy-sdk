/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/ai/analyze': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Analyze content for tag suggestions
     * @description Analyze content using AI and return tag suggestions
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Content ID to analyze */
      requestBody: {
        content: {
          'application/json': {
            content_id?: number;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.AITagSuggestionsResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/ai/models': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List AI models
     * @description Get a list of available AI models for tagging
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.AIModelResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/ai/settings': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get AI settings
     * @description Get user's AI tagging preferences and configuration
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.AITaggingSettingsResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    /**
     * Update AI settings
     * @description Update user's AI tagging preferences and configuration
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description AI settings to update */
      requestBody: {
        content: {
          'application/json': components['schemas']['handlers.UpdateAISettingsRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.AITaggingSettingsResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/ai/suggestions/{contentId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get AI tag suggestions
     * @description Get AI-generated tag suggestions for a specific content item
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Content ID */
          contentId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.AITagSuggestionsResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/ai/train': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Train AI model
     * @description Initiate training of a personalized AI model based on user's tagging history
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.TrainModelResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/archive/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get archive by ID
     * @description Retrieve a specific archive by its ID
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Archive ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.ArchiveResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    /**
     * Delete an archive
     * @description Delete an existing archive by its ID
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Archive ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/archive/create': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create a web page archive
     * @description Create an archive of a web page for the specified content
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Archive creation request */
      requestBody: {
        content: {
          'application/json': components['schemas']['handlers.CreateArchiveRequest'];
        };
      };
      responses: {
        /** @description Accepted */
        202: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.ArchiveResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/archive/status/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get archive status
     * @description Check the status of an archive creation process
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Archive ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.ArchiveResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/user': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get current user profile
     * @description Gets the profile information of the currently authenticated user
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.UserProfileResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/validate': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Validate JWT token
     * @description Validates a JWT token with Hanko authentication service and creates/updates user in database
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Token validation request */
      requestBody: {
        content: {
          'application/json': components['schemas']['handlers.HankoTokenRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.HankoTokenResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/collections': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List user collections
     * @description Get all collections for the authenticated user with filtering and sorting options
     */
    get: {
      parameters: {
        query?: {
          /** @description Filter by public/private status */
          is_public?: boolean;
          /** @description Filter by shared status */
          is_shared?: boolean;
          /** @description Filter by collection name */
          name?: string;
          /** @description Sort by field (name, created_at, updated_at) */
          sort_by?: string;
          /** @description Sort order (asc, desc) */
          sort_order?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.CollectionResponse'][];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    put?: never;
    /**
     * Create a new collection
     * @description Create a new collection for the authenticated user
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Collection creation request */
      requestBody: {
        content: {
          'application/json': components['schemas']['handlers.CreateCollectionRequest'];
        };
      };
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.CollectionResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/collections/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get collection by ID
     * @description Get a specific collection by ID with its contents for the authenticated user
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Collection ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.CollectionResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    /**
     * Update a collection
     * @description Update an existing collection for the authenticated user
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Collection ID */
          id: number;
        };
        cookie?: never;
      };
      /** @description Collection update request */
      requestBody: {
        content: {
          'application/json': components['schemas']['handlers.UpdateCollectionRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.CollectionResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    post?: never;
    /**
     * Delete a collection
     * @description Delete an existing collection for the authenticated user
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Collection ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/collections/{id}/items': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Add items to collection
     * @description Add content items to an existing collection for the authenticated user
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Collection ID */
          id: number;
        };
        cookie?: never;
      };
      /** @description Add items request */
      requestBody: {
        content: {
          'application/json': components['schemas']['handlers.AddItemsRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/collections/{id}/items/{itemId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Remove item from collection
     * @description Remove a content item from an existing collection for the authenticated user
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Collection ID */
          id: number;
          /** @description Content Item ID */
          content_id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/comments/{id}/like': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Check if user has liked a comment
     * @description Check if the authenticated user has liked a comment
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Comment ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.LikeResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    put?: never;
    /**
     * Like a comment
     * @description Like a comment for the authenticated user
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Comment ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.LikeCollectionResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    /**
     * Unlike a comment
     * @description Unlike a comment for the authenticated user
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Comment ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.LikeCollectionResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/content': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List user content
     * @description Get all content for the authenticated user with pagination and filtering
     */
    get: {
      parameters: {
        query?: {
          /** @description Page number (default: 1) */
          page?: number;
          /** @description Page size (default: 20) */
          page_size?: number;
          /** @description Content type filter */
          type?: string;
          /** @description Filter by tag ID */
          tag_id?: number;
          /** @description Filter by collection ID */
          collection_id?: number;
          /** @description Search query */
          search?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.ContentListResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    put?: never;
    /**
     * Save new content
     * @description Save new content for the authenticated user
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Content creation request */
      requestBody: {
        content: {
          'application/json': components['schemas']['handlers.CreateContentRequest'];
        };
      };
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.ContentResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/content/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get content by ID
     * @description Get specific content by ID for the authenticated user
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Content ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.ContentResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    /**
     * Update content
     * @description Update existing content for the authenticated user
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Content ID */
          id: number;
        };
        cookie?: never;
      };
      /** @description Content update request */
      requestBody: {
        content: {
          'application/json': components['schemas']['handlers.UpdateContentRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.ContentResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    post?: never;
    /**
     * Delete content
     * @description Delete existing content for the authenticated user
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Content ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/content/{id}/tags': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Add tags to content
     * @description Add tags to specific content for the authenticated user
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Content ID */
          id: number;
        };
        cookie?: never;
      };
      /** @description Add tags request */
      requestBody: {
        content: {
          'application/json': components['schemas']['handlers.AddTagsRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.SuccessResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/content/{id}/tags/{tagId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Remove tag from content
     * @description Remove a specific tag from content for the authenticated user
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Content ID */
          id: number;
          /** @description Tag ID */
          tagId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.SuccessResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/content/bulk': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Perform bulk operations on content
     * @description Perform bulk operations (delete, add tags, remove tags) on multiple content items
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Bulk operation request */
      requestBody: {
        content: {
          'application/json': components['schemas']['handlers.BulkOperationRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.SuccessResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/extension/ai-suggestions/{contentId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get AI tag suggestions for content
     * @description Get AI-generated tag suggestions for content from browser extension
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Content ID */
          contentId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.ExtensionAISuggestionResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/extension/archive': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Archive current page (Extension)
     * @description Archive the current page from browser extension
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Archive current page request */
      requestBody: {
        content: {
          'application/json': components['schemas']['handlers.ArchiveCurrentPageRequest'];
        };
      };
      responses: {
        /** @description Accepted */
        202: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.ArchiveResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/extension/media-job/{jobId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Check media job progress (Extension)
     * @description Check the progress of a media fetch job from browser extension
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Job ID */
          jobId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: unknown;
            };
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/extension/quick-tag': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Quick tag content from extension
     * @description Quickly apply tags to content from browser extension
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Quick tag request */
      requestBody: {
        content: {
          'application/json': components['schemas']['handlers.QuickTagRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.QuickTagResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/extension/save-bookmark': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Save bookmark from extension
     * @description Save a bookmark from browser extension with metadata and tags
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Save bookmark request */
      requestBody: {
        content: {
          'application/json': components['schemas']['handlers.SaveBookmarkRequest'];
        };
      };
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.ExtensionResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/extension/save-image': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Save image from extension
     * @description Save an image from browser extension with metadata and tags
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Save image request */
      requestBody: {
        content: {
          'application/json': components['schemas']['handlers.SaveImageRequest'];
        };
      };
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.ExtensionResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/extension/save-text': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Save text selection from extension
     * @description Save selected text from browser extension with context and tags
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Save text request */
      requestBody: {
        content: {
          'application/json': components['schemas']['handlers.SaveTextRequest'];
        };
      };
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.ExtensionResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/extension/save-video': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Save video from extension
     * @description Save a video from browser extension for downloading
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Save video request */
      requestBody: {
        content: {
          'application/json': components['schemas']['handlers.SaveVideoRequest'];
        };
      };
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.ExtensionResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/extension/tags': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get user tags for extension
     * @description Get user's tags for quick selection in browser extension
     */
    get: {
      parameters: {
        query?: {
          /** @description Get recent tags */
          recent?: boolean;
          /** @description Get popular tags */
          popular?: boolean;
          /** @description Limit number of results */
          limit?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.TagResponse'][];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/files/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Download a file
     * @description Download a file by ID for the authenticated user
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description File ID */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description File content */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/octet-stream': string;
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/octet-stream': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/octet-stream': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/octet-stream': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/octet-stream': {
              [key: string]: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    /**
     * Delete a file
     * @description Delete a file by ID for the authenticated user
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description File ID */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/files/presigned': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Generate presigned URL
     * @description Generate a presigned URL for temporary file access for the authenticated user
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Presigned URL request */
      requestBody: {
        content: {
          'application/json': components['schemas']['handlers.PresignedURLRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.PresignedURLResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/files/upload': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Upload a file
     * @description Upload a file with optional title and description for the authenticated user
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'multipart/form-data': {
            /**
             * Format: binary
             * @description File to upload
             */
            file: string;
            /** @description File title */
            title?: string;
            /** @description File description */
            description?: string;
          };
        };
      };
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.FileUploadResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/health': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Health check
     * @description Check if the API is running
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.HealthCheckResponse'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/likes/collections': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get collections liked by user
     * @description Get collections liked by the authenticated user
     */
    get: {
      parameters: {
        query?: {
          /** @description Limit the number of results (default: 10) */
          limit?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.CollectionResponse'][];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/likes/collections/{id}/like': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Check if user has liked a collection
     * @description Check if the authenticated user has liked a collection
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Collection ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.LikeResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    put?: never;
    /**
     * Like a collection
     * @description Like a collection for the authenticated user
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Collection ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.LikeCollectionResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    /**
     * Unlike a collection
     * @description Unlike a collection for the authenticated user
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Collection ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.LikeCollectionResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/media/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Delete media
     * @description Delete a media file and its associated job
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Media ID */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/media/fetch': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Fetch media from URL
     * @description Fetch video/audio content from various platforms and URLs
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Media fetch request */
      requestBody: {
        content: {
          'application/json': components['schemas']['handlers.FetchMediaRequest'];
        };
      };
      responses: {
        /** @description Accepted */
        202: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.MediaJobResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/media/fetch-audio': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Fetch audio from video URL
     * @description Extract and fetch audio content from video sources
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Audio fetch request */
      requestBody: {
        content: {
          'application/json': components['schemas']['handlers.FetchAudioRequest'];
        };
      };
      responses: {
        /** @description Accepted */
        202: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.MediaJobResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/media/fetch-status/{jobId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get media fetch status
     * @description Check the status of a media fetch job
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Job ID */
          jobId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.MediaJobResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/media/formats/{url}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get available media formats
     * @description Get available formats for a media URL before fetching
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Media URL (URL-encoded) */
          url: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.MediaFormatResponse'][];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/media/settings': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get media settings
     * @description Get user's media fetch settings and preferences
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.MediaSettingsResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    /**
     * Update media settings
     * @description Update user's media fetch settings and preferences
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Media settings update request */
      requestBody: {
        content: {
          'application/json': components['schemas']['handlers.UpdateMediaSettingsRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.MediaSettingsResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/ready': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Readiness check
     * @description Check if the API and its dependencies are ready
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.ReadyCheckResponse'];
          };
        };
        /** @description Service Unavailable */
        503: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.ReadyCheckErrorResponse'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search content
     * @description Search through user's content with filters and pagination
     */
    get: {
      parameters: {
        query: {
          /** @description Search query */
          q: string;
          /** @description Page number (default: 1) */
          page?: number;
          /** @description Items per page (default: 20, max: 100) */
          per_page?: number;
          /** @description Content type filter */
          type?: string;
          /** @description Tag IDs filter (comma-separated) */
          tags?: string;
          /** @description Start date filter (YYYY-MM-DD) */
          from_date?: string;
          /** @description End date filter (YYYY-MM-DD) */
          to_date?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.SearchResultsResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/search/recent': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get recent content
     * @description Get recently created/updated content for the authenticated user
     */
    get: {
      parameters: {
        query?: {
          /** @description Limit number of results (default: 10, max: 100) */
          limit?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.SearchResultResponse'][];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/search/suggestions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get search suggestions
     * @description Get search suggestions based on query for the authenticated user
     */
    get: {
      parameters: {
        query: {
          /** @description Search query for suggestions */
          q: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.SearchSuggestionResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/search/trending': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get trending content
     * @description Get trending/popular content for the authenticated user
     */
    get: {
      parameters: {
        query?: {
          /** @description Limit number of results (default: 10, max: 100) */
          limit?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.SearchResultResponse'][];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/sharing/collections': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List shared collections
     * @description Get all collections shared by or with the authenticated user
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.SharedCollectionResponse'][];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/sharing/collections/{id}/collaborate': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Add collaborators to collection
     * @description Add collaborators to a shared collection with specified permissions
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Collection ID */
          id: string;
        };
        cookie?: never;
      };
      /** @description Add collaborators request */
      requestBody: {
        content: {
          'application/json': components['schemas']['handlers.AddCollaboratorsRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/sharing/collections/{id}/permissions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * Update sharing permissions
     * @description Update sharing permissions and settings for a shared collection
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Collection ID */
          id: string;
        };
        cookie?: never;
      };
      /** @description Update sharing permissions request */
      requestBody: {
        content: {
          'application/json': components['schemas']['handlers.ShareCollectionRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.ShareSettingsResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/sharing/collections/{id}/share': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Share a collection
     * @description Share a collection with public, private, or link-only access
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Collection ID */
          id: string;
        };
        cookie?: never;
      };
      /** @description Share collection request */
      requestBody: {
        content: {
          'application/json': components['schemas']['handlers.ShareCollectionRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.ShareSettingsResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    /**
     * Remove collection sharing
     * @description Remove sharing settings from a collection, making it private
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Collection ID */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/sharing/invitations': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get collaboration invitations
     * @description Get all collaboration invitations for the authenticated user
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.CollaboratorResponse'][];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/sharing/invitations/{id}/accept': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Accept collaboration invitation
     * @description Accept a collaboration invitation for the authenticated user
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Invitation ID */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/sharing/invitations/{id}/decline': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Decline collaboration invitation
     * @description Decline a collaboration invitation for the authenticated user
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Invitation ID */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/sharing/public/{shareId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Access public collection
     * @description Access a publicly shared collection using its share token
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Share token */
          shareId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.PublicCollectionResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/sharing/tags/{id}/share': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Share a tag library
     * @description Share a tag library with other users
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Tag Library ID */
          id: string;
        };
        cookie?: never;
      };
      /** @description Share tag library request */
      requestBody: {
        content: {
          'application/json': components['schemas']['handlers.ShareTagLibraryRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.ShareSettingsResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/sharing/tags/import': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Import tags from a shared library
     * @description Import tags from a shared library to the authenticated user's tags
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Import tags request */
      requestBody: {
        content: {
          'application/json': components['schemas']['handlers.ImportTagsRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/sharing/tags/public': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Browse public tag libraries
     * @description Get a list of publicly shared tag libraries
     */
    get: {
      parameters: {
        query?: {
          /** @description Limit number of results (default 20, max 100) */
          limit?: number;
          /** @description Offset for pagination (default 0) */
          offset?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.TagLibraryResponse'][];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tags': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List user tags
     * @description Get all tags for the authenticated user with optional filtering
     */
    get: {
      parameters: {
        query?: {
          /** @description Include tags with content */
          with_content?: boolean;
          /** @description Get popular tags */
          popular?: boolean;
          /** @description Get recent tags */
          recent?: boolean;
          /** @description Limit number of results */
          limit?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.TagResponse'][];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    put?: never;
    /**
     * Create a new tag
     * @description Create a new tag for the authenticated user
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Tag creation request */
      requestBody: {
        content: {
          'application/json': components['schemas']['handlers.CreateTagRequest'];
        };
      };
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.TagResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tags/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * Update a tag
     * @description Update an existing tag for the authenticated user
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Tag ID */
          id: number;
        };
        cookie?: never;
      };
      /** @description Tag update request */
      requestBody: {
        content: {
          'application/json': components['schemas']['handlers.UpdateTagRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.TagResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    post?: never;
    /**
     * Delete a tag
     * @description Delete an existing tag for the authenticated user
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Tag ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tags/suggestions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get tag suggestions
     * @description Get tag suggestions based on query for the authenticated user
     */
    get: {
      parameters: {
        query: {
          /** @description Search query for tag suggestions */
          q: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['handlers.TagResponse'][];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              [key: string]: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    'handlers.AIModelResponse': {
      models?: string[];
    };
    'handlers.AITagSuggestionResponse': {
      confidence?: number;
      reason?: string;
      tag_name?: string;
    };
    'handlers.AITagSuggestionsResponse': {
      content_id?: number;
      suggestions?: components['schemas']['handlers.AITagSuggestionResponse'][];
    };
    'handlers.AITaggingSettingsResponse': {
      analyze_images?: boolean;
      analyze_text?: boolean;
      analyze_webpages?: boolean;
      auto_tagging_enabled?: boolean;
      confidence_threshold?: number;
      created_at?: string;
      custom_prompt?: string;
      enabled?: boolean;
      excluded_domains?: string;
      id?: number;
      max_tags_per_content?: number;
      preferred_languages?: string;
      provider?: string;
      updated_at?: string;
      use_custom_model?: boolean;
      user_id?: string;
    };
    'handlers.AddCollaboratorsRequest': {
      collaborators: components['schemas']['handlers.CollaboratorRequest'][];
    };
    'handlers.AddItemsRequest': {
      content_ids: number[];
    };
    'handlers.AddTagsRequest': {
      tag_ids: number[];
    };
    'handlers.ArchiveCurrentPageRequest': {
      content_id: number;
      format?: string;
      url: string;
    };
    'handlers.ArchiveResponse': {
      archive_url?: string;
      completed_at?: string;
      content_id?: number;
      created_at?: string;
      error?: string;
      file_size?: number;
      format?: string;
      id?: number;
      status?: string;
      url?: string;
    };
    'handlers.BulkOperationRequest': {
      content_ids: number[];
      operation: string;
      tag_ids?: number[];
    };
    'handlers.CollaboratorRequest': {
      email?: string;
      /** @enum {string} */
      permission: 'viewer' | 'contributor' | 'editor' | 'admin';
      user_id?: string;
    };
    'handlers.CollaboratorResponse': {
      email?: string;
      id?: number;
      invited_at?: string;
      joined_at?: string;
      permission?: string;
      status?: string;
      user_id?: string;
    };
    'handlers.CollectionResponse': {
      created_at?: string;
      description?: string;
      has_liked?: boolean;
      id?: number;
      is_public?: boolean;
      is_shared?: boolean;
      item_count?: number;
      like_count?: number;
      name?: string;
      updated_at?: string;
      user_id?: string;
      view_count?: number;
    };
    'handlers.ContentListResponse': {
      data?: components['schemas']['handlers.ContentResponse'][];
      page?: number;
      page_size?: number;
      total?: number;
      total_pages?: number;
    };
    'handlers.ContentResponse': {
      content?: string;
      created_at?: string;
      description?: string;
      file_url?: string;
      id?: number;
      tags?: components['schemas']['handlers.TagResponse'][];
      thumbnail_url?: string;
      title?: string;
      type?: string;
      updated_at?: string;
      url?: string;
    };
    'handlers.CreateArchiveRequest': {
      content_id: number;
      format?: string;
      url: string;
    };
    'handlers.CreateCollectionRequest': {
      description?: string;
      is_public?: boolean;
      name: string;
    };
    'handlers.CreateContentRequest': {
      content?: string;
      description?: string;
      file_url?: string;
      tag_ids?: number[];
      thumbnail_url?: string;
      title: string;
      type: string;
      url?: string;
    };
    'handlers.CreateTagRequest': {
      color?: string;
      icon?: string;
      name: string;
      parent_id?: number;
    };
    'handlers.ExtensionAISuggestionResponse': {
      id?: number;
      /** @description For async operations like video fetching */
      job_id?: number;
      message?: string;
      status?: string;
      suggestions?: components['schemas']['handlers.AITagSuggestionResponse'][];
    };
    'handlers.ExtensionResponse': {
      id?: number;
      /** @description For async operations like video fetching */
      job_id?: number;
      message?: string;
      status?: string;
    };
    'handlers.FetchAudioRequest': {
      description?: string;
      title?: string;
      url: string;
    };
    'handlers.FetchMediaRequest': {
      audio_only?: boolean;
      description?: string;
      title?: string;
      url: string;
    };
    'handlers.FileUploadResponse': {
      created_at?: string;
      description?: string;
      file_size?: number;
      file_url?: string;
      id?: number;
      mime_type?: string;
      thumbnail_url?: string;
      title?: string;
      type?: string;
      updated_at?: string;
    };
    'handlers.HankoTokenRequest': {
      audience?: string;
      jwt?: string;
    };
    'handlers.HankoTokenResponse': {
      is_valid?: boolean;
    };
    'handlers.HealthCheckResponse': {
      status?: string;
      time?: string;
    };
    'handlers.ImportTagsRequest': {
      library_id: number;
    };
    'handlers.LikeCollectionResponse': {
      message?: string;
    };
    'handlers.LikeResponse': {
      liked?: boolean;
    };
    'handlers.MediaFormatResponse': {
      audio_only?: boolean;
      codec?: string;
      extension?: string;
      file_size?: number;
      format_id?: string;
      quality?: string;
      resolution?: string;
    };
    'handlers.MediaJobResponse': {
      audio_only?: boolean;
      completed_at?: string;
      content_id?: number;
      created_at?: string;
      description?: string;
      duration?: number;
      error?: string;
      file_path?: string;
      file_size?: number;
      format?: string;
      id?: number;
      original_url?: string;
      progress?: number;
      started_at?: string;
      status?: string;
      thumbnail?: string;
      thumbnail_path?: string;
      title?: string;
      upload_date?: string;
      uploader?: string;
      url?: string;
      user_id?: string;
      view_count?: number;
    };
    'handlers.MediaSettingsResponse': {
      allowed_domains?: string;
      audio_format?: string;
      audio_quality?: string;
      auto_extract_audio?: boolean;
      blocked_domains?: string;
      created_at?: string;
      id?: number;
      max_file_size?: number;
      preferred_format?: string;
      preferred_quality?: string;
      save_subtitles?: boolean;
      save_thumbnails?: boolean;
      updated_at?: string;
      user_id?: string;
    };
    'handlers.PresignedURLRequest': {
      /** @description in seconds */
      expiry?: number;
      file_id?: number;
    };
    'handlers.PresignedURLResponse': {
      url?: string;
    };
    'handlers.PublicCollectionResponse': {
      content_count?: number;
      created_at?: string;
      description?: string;
      id?: number;
      like_count?: number;
      name?: string;
      share_settings?: components['schemas']['handlers.ShareSettingsResponse'];
      updated_at?: string;
      view_count?: number;
    };
    'handlers.QuickTagRequest': {
      content_id: number;
      tag_ids: number[];
    };
    'handlers.QuickTagResponse': {
      id?: number;
      /** @description For async operations like video fetching */
      job_id?: number;
      message?: string;
      status?: string;
      tags?: components['schemas']['handlers.TagResponse'][];
    };
    'handlers.ReadyCheckErrorResponse': {
      database?: string;
      message?: string;
      status?: string;
    };
    'handlers.ReadyCheckResponse': {
      database?: string;
      status?: string;
    };
    'handlers.SaveBookmarkRequest': {
      archive?: boolean;
      description?: string;
      tag_ids?: number[];
      title: string;
      url: string;
    };
    'handlers.SaveImageRequest': {
      description?: string;
      file_url?: string;
      source?: string;
      tag_ids?: number[];
      thumbnail_url?: string;
      title?: string;
      url: string;
    };
    'handlers.SaveTextRequest': {
      content: string;
      context?: string;
      source: string;
      tag_ids?: number[];
      title: string;
    };
    'handlers.SaveVideoRequest': {
      audio_only?: boolean;
      description?: string;
      tag_ids?: number[];
      title?: string;
      url: string;
    };
    'handlers.SearchResultResponse': {
      content_type?: string;
      created_at?: string;
      description?: string;
      highlights?: {
        [key: string]: string;
      };
      id?: number;
      tags?: components['schemas']['handlers.TagResponse'][];
      title?: string;
      updated_at?: string;
      url?: string;
    };
    'handlers.SearchResultsResponse': {
      page?: number;
      per_page?: number;
      results?: components['schemas']['handlers.SearchResultResponse'][];
      total?: number;
    };
    'handlers.SearchSuggestionResponse': {
      suggestions?: string[];
    };
    'handlers.ShareCollectionRequest': {
      allow_comments?: boolean;
      allow_download?: boolean;
      allow_fork?: boolean;
      expires_at?: string;
      /** @enum {string} */
      share_type: 'public' | 'private' | 'link-only';
    };
    'handlers.ShareSettingsResponse': {
      allow_comments?: boolean;
      allow_download?: boolean;
      allow_fork?: boolean;
      created_at?: string;
      expires_at?: string;
      id?: number;
      is_active?: boolean;
      share_token?: string;
      share_type?: string;
      updated_at?: string;
      view_count?: number;
    };
    'handlers.ShareTagLibraryRequest': {
      /** @enum {string} */
      share_type: 'public' | 'private';
    };
    'handlers.SharedCollectionResponse': {
      created_at?: string;
      description?: string;
      id?: number;
      is_public?: boolean;
      is_shared?: boolean;
      like_count?: number;
      name?: string;
      share_settings?: components['schemas']['handlers.ShareSettingsResponse'];
      updated_at?: string;
      view_count?: number;
    };
    'handlers.SuccessResponse': {
      status?: string;
    };
    'handlers.TagLibraryResponse': {
      category?: string;
      created_at?: string;
      description?: string;
      id?: number;
      is_public?: boolean;
      name?: string;
      rating?: number;
      share_settings?: components['schemas']['handlers.ShareSettingsResponse'];
      tag_count?: number;
      updated_at?: string;
      use_count?: number;
    };
    'handlers.TagResponse': {
      color?: string;
      icon?: string;
      id?: number;
      name?: string;
      parent_id?: number;
    };
    'handlers.TrainModelResponse': {
      message?: string;
      status?: string;
    };
    'handlers.UpdateAISettingsRequest': {
      analyze_images?: boolean;
      analyze_text?: boolean;
      analyze_webpages?: boolean;
      auto_tagging_enabled?: boolean;
      confidence_threshold?: number;
      custom_prompt?: string;
      enabled?: boolean;
      excluded_domains?: string;
      max_tags_per_content?: number;
      preferred_languages?: string;
      provider?: string;
      use_custom_model?: boolean;
    };
    'handlers.UpdateCollectionRequest': {
      description?: string;
      is_public?: boolean;
      name: string;
    };
    'handlers.UpdateContentRequest': {
      content?: string;
      description?: string;
      file_url?: string;
      thumbnail_url?: string;
      title: string;
      url?: string;
    };
    'handlers.UpdateMediaSettingsRequest': {
      allowed_domains?: string;
      audio_format?: string;
      audio_quality?: string;
      auto_extract_audio?: boolean;
      blocked_domains?: string;
      max_file_size?: number;
      preferred_format?: string;
      preferred_quality?: string;
      save_subtitles?: boolean;
      save_thumbnails?: boolean;
    };
    'handlers.UpdateTagRequest': {
      color?: string;
      icon?: string;
      name: string;
      parent_id?: number;
    };
    'handlers.UserProfileResponse': {
      created_at?: string;
      email?: string;
      id?: string;
      is_active?: boolean;
      last_login_at?: string;
      name?: string;
      profile_pic_url?: string;
      role?: string;
      updated_at?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
